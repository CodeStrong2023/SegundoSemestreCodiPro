JAVA

Java Syntax

    - Java is case-sensitive: "MyClass" and "myclass" has different meaning
    - Every line of code that runs in Java must be inside a class.  A class should always start with an uppercase first letter.
    - The name of the java file must match the class name. When saving the file, save it using the class name and
     add ".java" to the end of the filename.

The main Method
    - Any code inside the main() method will be executed. 
    - Remember that every Java program has a class name which must match the filename, and that every program must 
    contain the main() method.

System.out.println()
    - Inside the main() method, we can use the println() method to print a line of text to the screen.

    EJ: public class Main {
            public static void main(String[] args) {
                System.out.println("Hello World");
         }
        }

    Note: The curly braces {} marks the beginning and the end of a block of code.
          System is a built-in Java class that contains useful members, such as out, which is short for "output". 
          The println() method, short for "print line", is used to print a value to the screen (or a file).
          Don't worry too much about System, out and println(). Just know that you need them together to print stuff to the screen.
          You should also note that each code statement must end with a semicolon (;).

Print Text          
    - You can add as many println() methods as you want. Add a new line for each method.
    - When you are working with text, it must be wrapped inside double quotations marks "".

The Print() Method
    - There is also a print() method, which is similar to println().
    - The only difference is that it does not insert a new line at the end of the output.

Print Numbers
    - You can also use the println() method to print numbers.
    - However, unlike text, we don't put numbers inside double quotes.
    - You can also perform mathematical calculations inside the println() method.

Java Comments
    Single-line Comments:
        - Single-line comments start with two forward slashes (//).
        - Any text between // and the end of the line is ignored by Java (will not be executed).    
    Java Multi-line Comments:
        - Multi-line comments start with /* and ends with */.
        - Any text between /* and */ will be ignored by Java.


Java Variables
    Variables are containers for storing data values.
    In Java, there are different types of variables, for example:
        - String - stores text, such as "Hello". String values are surrounded by double quotes
        - int - stores integers (whole numbers), without decimals, such as 123 or -123
        - float - stores floating point numbers, with decimals, such as 19.99 or -19.99
        - char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
        - boolean - stores values with two states: true or false

    Declaring (Creating) Variables
        - To create a variable, you must specify the type and assign it a value.
            type variableName = value;
                Where type is one of Java's types (such as int or String),
                and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.    
        - You can also declare a variable without assigning the value, and assign the value later:
            int myNum;
            myNum = 15;
            System.out.println(myNum);   
        - If you assign a new value to an existing variable, it will overwrite the previous value: 
            int myNum = 15;
            myNum = 20;  // myNum is now 20
            System.out.println(myNum);  
    Final Variables
        If you don't want others (or yourself) to overwrite existing values, use the final keyword (this will declare the 
        variable as "final" or "constant", which means unchangeable and read-only):
            final int myNum = 15;
            myNum = 20;  // will generate an error: cannot assign a value to a final variable

Java Print Variables                
    - The println() method is often used to display variables.
    - To combine both text and a variable, use the + character:
        String name = "John";
        System.out.println("Hello " + name);


